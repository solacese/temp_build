{"version":3,"sources":["LoginCtrl.js","MatchSubscription.js","MatchTable.js","DeltaTable.js","App.js","theme.js","index.js"],"names":["useStyles","makeStyles","theme","button","margin","spacing","LoginCtrl","props","classes","useState","host","setHost","port","setPort","userName","setUserName","password","setPassword","Box","Alert","variant","severity","status","isConnect","text","noValidate","autoComplete","TextField","required","id","label","value","onChange","e","target","type","className","Button","color","onClick","connect","disabled","disConnect","MatchSubscription","testCase","setTestCase","topicsMap","get","topics","setTopics","disabledStart","disabledStop","isStart","my","FormLabel","component","RadioGroup","row","aria-label","name","FormControlLabel","control","Radio","style","placeholder","fullWidth","start","stop","table","minWidth","MatchTable","TableContainer","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","matchList","map","m","key","matchNum","scope","matchDate","substring","league","leagueShortName","homeTeam","teamNameCH","awayTeam","matchStatus","statuslastupdated","odds","hadodds","H","A","D","mqttClient","DeltaTable","deltaList","d","sequenceInt","replyToTopic","utf8decoder","TextDecoder","Map","_gCurrentMatchList","_gCurrentDeltaList","_lastSeq","App","setStatus","setIsStart","setMatchList","setDeltaList","onFailure","response","errorMessage","onConnectionLost","onConnected","reconnect","URI","subscribe","onMessageArrived","message","destinationName","payloadString","json","JSON","parse","decode","payloadBytes","isDelta","delta","index","findIndex","match","publishCacheRequest","onDeltaMessage","push","length","shift","isReSend","curSeq","console","log","onSequenceaMessage","splice","onFullMatchMessage","requestTopic","req","protocol","topic","replyTo","publish","stringify","Container","maxWidth","parseInt","MQTT","options","timeout","disconnect","testCaseToDo","unsubscribe","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"iRAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACN,QAAS,CACPC,OAAQF,EAAMG,QAAQ,SAKb,SAASC,EAAUC,GAChC,IAAMC,EAAUR,IADuB,EAGjBS,mBAASF,EAAMG,MAHE,mBAGlCA,EAHkC,KAG5BC,EAH4B,OAIjBF,mBAASF,EAAMK,MAJE,mBAIlCA,EAJkC,KAI5BC,EAJ4B,OAKTJ,mBAASF,EAAMO,UALN,mBAKlCA,EALkC,KAKxBC,EALwB,OAMTN,mBAASF,EAAMS,UANN,mBAMlCA,EANkC,KAMxBC,EANwB,KAQvC,OACI,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,QAAQ,SAASC,SAAUd,EAAMe,OAAOC,UAAY,UAAY,WAAYhB,EAAMe,OAAOE,MAChG,6BACA,0BAAMC,YAAU,EAACC,aAAa,OAC5B,6BACE,kBAACC,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,OAAOC,MAAM,OAAOC,MAAOrB,EAAMsB,SAAU,SAAAC,GAAC,OAAItB,EAAQsB,EAAEC,OAAOH,UACxF,kBAACJ,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,OAAOC,MAAM,OAAOC,MAAOnB,EAAMoB,SAAU,SAAAC,GAAC,OAAIpB,EAAQoB,EAAEC,OAAOH,UACxF,kBAACJ,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,WAAWC,MAAM,WAAWC,MAAOjB,EAAUkB,SAAU,SAAAC,GAAC,OAAIlB,EAAYkB,EAAEC,OAAOH,UACxG,kBAACJ,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,WAAWC,MAAM,WAAWK,KAAK,WAAWJ,MAAOf,EAAUgB,SAAU,SAAAC,GAAC,OAAIhB,EAAYgB,EAAEC,OAAOH,WAE1H,yBAAKK,UAAW5B,EAAQL,QACxB,kBAACkC,EAAA,EAAD,CAAQjB,QAAQ,YAAYkB,MAAM,UAAUC,QAAS,kBAAIhC,EAAMiC,QAAQ9B,EAAKE,EAAKE,EAASE,IACxFyB,SAAUlC,EAAMe,OAAOC,WADzB,WAEA,kBAACc,EAAA,EAAD,CAAQjB,QAAQ,YAAYkB,MAAM,UAAUC,QAAShC,EAAMmC,WACzDD,UAAWlC,EAAMe,OAAOC,WAD1B,iB,wCC1BJvB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACN,QAAS,CACPC,OAAQF,EAAMG,QAAQ,SAKb,SAASsC,EAAkBpC,GACxC,IAAMC,EAAUR,IAD+B,EAGjBS,mBAASF,EAAMqC,UAHE,mBAG1CA,EAH0C,KAGhCC,EAHgC,OAIrBpC,mBAASF,EAAMuC,UAAUC,IAAIxC,EAAMqC,WAJd,mBAI1CI,EAJ0C,KAIlCC,EAJkC,KAM3CC,GAAgB,EAAMC,GAAe,EAWzC,OAVI5C,EAAMe,OAAOC,YACf2B,EAAgB3C,EAAM6C,QACtBD,GAAgB5C,EAAM6C,SAStB,kBAAClC,EAAA,EAAD,CAAKmC,GAAI,GACP,0BAAM5B,YAAU,EAACC,aAAa,OAC9B,kBAAC4B,EAAA,EAAD,CAAWC,UAAU,UAArB,cACA,kBAACC,EAAA,EAAD,CAAYC,KAAG,EAACC,aAAW,WAAWC,KAAK,WACzC5B,MAAOa,EAAUZ,SAAU,SAAAC,GAAC,OAVZF,EAU6BE,EAAEC,OAAOH,MAT1Dc,EAAYd,QACZkB,EAAU1C,EAAMuC,UAAUC,IAAIhB,IAFhC,IAAsBA,IAWhB,kBAAC6B,EAAA,EAAD,CACE7B,MAAM,OACN8B,QAAS,kBAACC,EAAA,EAAD,CAAOxB,MAAM,YACtBR,MAAM,OACNW,SAAUS,IAEZ,kBAACU,EAAA,EAAD,CACE7B,MAAM,QACN8B,QAAS,kBAACC,EAAA,EAAD,CAAOxB,MAAM,YACtBR,MAAM,QACNW,SAAUS,IAEZ,kBAACU,EAAA,EAAD,CACE7B,MAAM,WACN8B,QAAS,kBAACC,EAAA,EAAD,CAAOxB,MAAM,YACtBR,MAAM,WACNW,SAAUS,KAGZ,6BACE,kBAACvB,EAAA,EAAD,CACEE,GAAG,SACHC,MAAM,SACNiC,MAAO,CAAE3D,OAAQ,GACjB4D,YAAY,cACZC,WAAS,EACT7D,OAAO,SACP2B,MAAOiB,EACPP,UAAQ,EACRT,SAAU,SAAAC,GAAC,OAAIgB,EAAUhB,EAAEC,OAAOH,WAGtC,yBAAKK,UAAW5B,EAAQL,QACtB,kBAACkC,EAAA,EAAD,CAAQjB,QAAQ,YAAYkB,MAAM,UAChCG,SAAUS,EACVX,QAAS,kBAAIhC,EAAM2D,MAAMtB,KAF3B,SAGA,kBAACP,EAAA,EAAD,CAAQjB,QAAQ,YAAYkB,MAAM,UAChCG,SAAUU,EACVZ,QAAShC,EAAM4D,MAFjB,W,mECpEJnE,EAAYC,YAAW,CAC3BmE,MAAO,CACLC,SAAU,OAIC,SAASC,EAAW/D,GACjC,IAAMC,EAAUR,IAQhB,OACE,6BACE,kBAACuE,EAAA,EAAD,CAAgBhB,UAAWiB,KACzB,kBAACC,EAAA,EAAD,CAAOrC,UAAW5B,EAAQ4D,MAAOM,KAAK,QAAQhB,aAAW,iBACvD,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,eACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UAGJ,kBAACC,EAAA,EAAD,KACGxE,EAAMyE,UAAUC,KAAI,SAACC,GAAD,OACnB,kBAACN,EAAA,EAAD,CAAUO,IAAKD,EAAEE,UACf,kBAACP,EAAA,EAAD,CAAWtB,UAAU,KAAK8B,MAAM,OAC7BH,EAAEE,UAEL,kBAACP,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAEI,UAAUC,UAAU,EAAG,KACnD,kBAACV,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAEM,OAAOC,iBACnC,kBAACZ,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAEQ,SAASC,YACrC,kBAACd,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAEU,SAASD,YACrC,kBAACd,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAEW,aAC5B,kBAAChB,EAAA,EAAD,CAAWC,MAAM,SAASI,EAAEY,kBAAkBP,UAAU,EAAG,KAC3D,kBAACV,EAAA,EAAD,CAAWC,MAAM,SAjCtB,MADUiB,EAkC+Bb,EAAEc,SAjC/BC,EACjB,OAASF,EAAKG,EACd,OAASH,EAAKI,IAHlB,IAAmBJ,SCTrB,ICAIK,EDAEpG,EAAYC,YAAW,CAC3BmE,MAAO,CACLC,SAAU,OAIC,SAASgC,EAAW9F,GACjC,IAAMC,EAAUR,IAQhB,OACE,6BACE,kBAACuE,EAAA,EAAD,CAAgBhB,UAAWiB,KACzB,kBAACC,EAAA,EAAD,CAAOrC,UAAW5B,EAAQ4D,MAAOM,KAAK,QAAQhB,aAAW,iBACvD,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,eACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UAGJ,kBAACC,EAAA,EAAD,KACGxE,EAAM+F,UAAUrB,KAAI,SAACsB,GAAD,OACnB,kBAAC3B,EAAA,EAAD,CAAUO,IAAKoB,EAAEC,aACf,kBAAC3B,EAAA,EAAD,CAAWtB,UAAU,KAAK8B,MAAM,OAAOkB,EAAEC,aACzC,kBAAC3B,EAAA,EAAD,CAAWC,MAAM,SAASyB,EAAEnB,UAC5B,kBAACP,EAAA,EAAD,CAAWC,MAAM,SAASyB,EAAEV,aAC5B,kBAAChB,EAAA,EAAD,CAAWC,MAAM,SAASyB,EAAET,kBAAkBP,UAAU,EAAG,KAC3D,kBAACV,EAAA,EAAD,CAAWC,MAAM,SAzBtB,MADUiB,EA0B+BQ,EAAEP,SAzB/BC,EACjB,OAASF,EAAKG,EACd,OAASH,EAAKI,IAHlB,IAAmBJ,SCRrB,IAAInD,EAAW,OACX6D,EAAe,GAEbC,EAAc,IAAIC,YAClB7D,EAAY,IAAI8D,IAAI,CAAC,CAAC,OAAQ,mBACpC,CAAC,QAAS,oBACV,CAAC,WAAY,sBACTC,EAAqB,GACrBC,EAAqB,GACrBC,EAAW,EAEA,SAASC,IAAO,IAAD,EACAvG,mBAAS,CACnCc,WAAW,EACXC,KAAM,kBAHoB,mBACrBF,EADqB,KACb2F,EADa,OAKExG,oBAAS,GALX,mBAKrB2C,EALqB,KAKZ8D,EALY,OAMMzG,mBAAS,IANf,mBAMrBuE,EANqB,KAMVmC,EANU,OAOM1G,mBAAS,IAPf,mBAOrB6F,EAPqB,KAOVc,EAPU,KAsC5B,SAASC,EAAUC,GACjBL,EAAU,CACR1F,WAAW,EACXC,KAAM,uBAAyB8F,EAASC,eAI5C,SAASC,EAAiBF,GACxBL,EAAU,CACR1F,WAAW,EACXC,KAAM,oBAAsB8F,EAASC,eAEvCL,GAAW,GAGb,SAASO,EAAYC,EAAWC,GAG9BvB,EAAWwB,UAAU,wBACrBX,EAAU,CACR1F,WAAW,EACXC,KAAM,gBAAkBmG,IAE1BT,GAAW,GAEXJ,EAAqB,GACrBK,EAFAN,EAAqB,IAGrBO,EAAaN,GAIf,SAASe,EAAiBC,GAExB,GAAgC,yBAA5BA,EAAQC,gBAGV,OAFAtB,EAAeqB,EAAQE,mBACvB5B,EAAWwB,UAAUnB,GAGvB,IAAIwB,EAAOC,KAAKC,MAAMzB,EAAY0B,OAAON,EAAQO,eAC7CJ,EAAKK,QACU,UAAb1F,EAmBR,SAAwB2F,GAGtB,IAAIC,EAAQ3B,EAAmB4B,WAAU,SAACvD,GAAD,OAAOA,EAAEE,WAAamD,EAAMnD,YACrE,GAAIoD,GAAS,EAAG,CACd,IAAIE,EAAQ7B,EAAmB2B,GAC/BE,EAAMtD,SAAWmD,EAAMnD,SACvBsD,EAAM7C,YAAc0C,EAAM1C,YAC1B6C,EAAM5C,kBAAoByC,EAAMzC,kBAChC4C,EAAM1C,QAAQC,EAAIsC,EAAMvC,QAAQC,EAChCyC,EAAM1C,QAAQE,EAAIqC,EAAMvC,QAAQE,EAChCwC,EAAM1C,QAAQG,EAAIoC,EAAMvC,QAAQG,EAEhCgB,EAAa,YAAIN,QACZ,CAIL8B,EADmB,YAAcJ,EAAMnD,SAAW,UAnChDwD,CAAeX,GAwCrB,SAA4BM,GAE1B,GADYzB,EAAmB2B,WAAU,SAAClC,GAAD,OAAMA,EAAEC,cAAgB+B,EAAM/B,gBAC1D,EACX,OAGFM,EAAmB+B,KAAKN,GACpBzB,EAAmBgC,OAAS,IAC9BhC,EAAmBiC,QAGrB,IAAIR,EAAMS,SAAS,CACjB,IAAIC,EAASV,EAAM/B,YACfyC,EAASlC,IAAa,IACxBmC,QAAQC,IAAR,6BAAkCpC,EAAlC,wBAA0DkC,IAE1DN,EAAoB7F,EAAUC,IAAIH,IAAW,IAE/CmE,EAAWkC,EAEb7B,EAAa,YAAIN,IA1DbsC,CAAmBnB,GAOzB,SAA4BS,GAC1B,IAAIF,EAAQ3B,EAAmB4B,WAAU,SAACvD,GAAD,OAAOA,EAAEE,WAAasD,EAAMtD,YACjEoD,GAAS,GACX3B,EAAmBwC,OAAOb,EAAO,GAEnC3B,EAAmBgC,KAAKH,GACxBvB,EAAa,YAAIN,IAVfyC,CAAmBrB,GAsEvB,SAASU,EAAoBY,GAA+B,IAAjBP,EAAgB,wDACrDQ,EAAM,CACRC,SAAU,OACVC,MAAOH,EACPI,QAASlD,EACTuC,SAAUA,GAEZ5C,EAAWwD,QA1KW,qBA0KgB1B,KAAK2B,UAAUL,IAWvD,OACE,kBAACM,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACzJ,EAAD,CAAWI,KAtKJ,YAsKgBE,KArKhB,KAqK4BE,SApKxB,MAoK4CE,SAnK5C,WAoKTM,OAAQA,EAAQkB,QAlKtB,SAAiB9B,EAAME,EAAME,EAAUE,GACrCkI,QAAQC,IAAI,uBACR,iBAAmBvI,IACrBA,EAAOoJ,SAASpJ,KAElBwF,EAAa,IAAI6D,SAAYvJ,EAAME,EAAM,KAC9B4G,iBAAmBA,EAC9BpB,EAAWyB,iBAAmBA,EAC9BzB,EAAWqB,YAAcA,EACzB,IAAIyC,EAAU,CACZC,QAAS,EACT9C,UAAWA,EACXvG,SAAUA,EACVE,SAAUA,GAEZoF,EAAW5D,QAAQ0H,IAmJmBxH,WAhJxC,WACEwG,QAAQC,IAAI,0BACR7H,EAAOC,WACT6E,EAAWgE,gBA8IX,kBAACzH,EAAD,CAAmBC,SAAUA,EAAUE,UAAWA,EAChDM,QAASA,EAAS9B,OAAQA,EAAQ4C,MAnCxC,SAAemG,GACbzH,EAAWyH,EACXnB,QAAQC,IAAI,UAAYvG,GAEP,SAAbA,GAAoC,UAAbA,GAEzB+F,EAAoB7F,EAAUC,IAAI,SAEpCqD,EAAWwB,UAAU9E,EAAUC,IAAIH,IACnCsE,GAAW,IA0ByC/C,KAZtD,WACEiC,EAAWkE,YAAYxH,EAAUC,IAAIH,IACrCsE,GAAW,GAEXL,EAAqB,MASP,aAAXjE,EACA,kBAACyD,EAAD,CAAYC,UAAWA,IACvB,kBAAChC,EAAD,CAAYU,UAAWA,K,oBCrLf9E,EAjBDqK,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,WCTfC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAejL,MAAOA,GAEpB,kBAACkL,EAAA,EAAD,MACA,kBAACpE,EAAD,OAEFqE,SAASC,cAAc,Y","file":"static/js/main.ca5fd370.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function LoginCtrl(props) {\n  const classes = useStyles();\n\n  var [host, setHost] = useState(props.host);\n  var [port, setPort] = useState(props.port);\n  var [userName, setUserName] = useState(props.userName);\n  var [password, setPassword] = useState(props.password);\n\n  return (\n      <Box>\n        <Alert variant=\"filled\" severity={props.status.isConnect ? \"success\" : \"warning\"}>{props.status.text}</Alert>\n        <br />\n        <form noValidate autoComplete=\"off\">\n          <div>\n            <TextField required id=\"host\" label=\"Host\" value={host} onChange={e => setHost(e.target.value)} />\n            <TextField required id=\"port\" label=\"Port\" value={port} onChange={e => setPort(e.target.value)} />\n            <TextField required id=\"userName\" label=\"UserName\" value={userName} onChange={e => setUserName(e.target.value)} />\n            <TextField required id=\"password\" label=\"Password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n          </div>\n          <div className={classes.button}>\n          <Button variant=\"contained\" color=\"primary\" onClick={()=>props.connect(host,port,userName,password)}\n            disabled={props.status.isConnect}>Connect</Button>\n          <Button variant=\"contained\" color=\"primary\" onClick={props.disConnect}\n            disabled={!props.status.isConnect}>Disconnect</Button>\n          </div>\n        </form>\n      </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function MatchSubscription(props) {\n  const classes = useStyles();\n\n  var [testCase, setTestCase] = useState(props.testCase);\n  var [topics, setTopics] = useState(props.topicsMap.get(props.testCase));\n  \n  var disabledStart = true, disabledStop = true;\n  if (props.status.isConnect) {\n    disabledStart = props.isStart;\n    disabledStop = !props.isStart;\n  }\n\n  function onCaseChange(value) {\n    setTestCase(value)\n    setTopics(props.topicsMap.get(value))\n  }\n  \n  return (\n    <Box my={1}>\n      <form noValidate autoComplete=\"off\">\n      <FormLabel component=\"legend\">Test Cases</FormLabel>\n      <RadioGroup row aria-label=\"position\" name=\"position\"\n        value={testCase} onChange={e => onCaseChange(e.target.value)}>\n        <FormControlLabel\n          value=\"FULL\"\n          control={<Radio color=\"primary\" />}\n          label=\"FULL\"\n          disabled={disabledStart}\n        />\n        <FormControlLabel\n          value=\"DELTA\"\n          control={<Radio color=\"primary\" />}\n          label=\"DELTA\"\n          disabled={disabledStart}\n        />\n        <FormControlLabel\n          value=\"SEQUENCE\"\n          control={<Radio color=\"primary\" />}\n          label=\"SEQUENCE\"\n          disabled={disabledStart}\n        />\n      </RadioGroup>\n        <div>\n          <TextField\n            id=\"topics\"\n            label=\"Topics\"\n            style={{ margin: 8 }}\n            placeholder=\"Placeholder\"\n            fullWidth\n            margin=\"normal\"\n            value={topics}\n            disabled\n            onChange={e => setTopics(e.target.value)}\n          />\n        </div>\n        <div className={classes.button}>\n          <Button variant=\"contained\" color=\"primary\"\n            disabled={disabledStart}\n            onClick={()=>props.start(testCase)}>Start</Button>\n          <Button variant=\"contained\" color=\"primary\"\n            disabled={disabledStop}\n            onClick={props.stop}>Stop</Button>\n        </div>\n      </form>\n    </Box>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function MatchTable(props) {\n  const classes = useStyles();\n\n  function toOddsStr(odds) {\n    return \"H:\" + odds.H +\n      \"\\nA:\" + odds.A +\n      \"\\nD:\" + odds.D\n  }\n  \n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Num</TableCell>\n              <TableCell align=\"right\">Date</TableCell>\n              <TableCell align=\"right\">League</TableCell>\n              <TableCell align=\"right\">Home</TableCell>\n              <TableCell align=\"right\">Away</TableCell>\n              <TableCell align=\"right\">Status</TableCell>\n              <TableCell align=\"right\">Last Update</TableCell>\n              <TableCell align=\"right\">Odds</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.matchList.map((m) => (\n              <TableRow key={m.matchNum}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {m.matchNum}\n                </TableCell>\n                <TableCell align=\"right\">{m.matchDate.substring(0, 10)}</TableCell>\n                <TableCell align=\"right\">{m.league.leagueShortName}</TableCell>\n                <TableCell align=\"right\">{m.homeTeam.teamNameCH}</TableCell>\n                <TableCell align=\"right\">{m.awayTeam.teamNameCH}</TableCell>\n                <TableCell align=\"right\">{m.matchStatus}</TableCell>\n                <TableCell align=\"right\">{m.statuslastupdated.substring(0, 19)}</TableCell>\n                <TableCell align=\"right\">{toOddsStr(m.hadodds)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function DeltaTable(props) {\n  const classes = useStyles();\n\n  function toOddsStr(odds) {\n    return \"H:\" + odds.H +\n      \", A:\" + odds.A +\n      \", D:\" + odds.D\n  }\n  \n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Sequence</TableCell>\n              <TableCell>Num</TableCell>\n              <TableCell align=\"right\">Status</TableCell>\n              <TableCell align=\"right\">Last Update</TableCell>\n              <TableCell align=\"right\">Odds</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.deltaList.map((d) => (\n              <TableRow key={d.sequenceInt}>\n                <TableCell component=\"th\" scope=\"row\">{d.sequenceInt}</TableCell>\n                <TableCell align=\"right\">{d.matchNum}</TableCell>\n                <TableCell align=\"right\">{d.matchStatus}</TableCell>\n                <TableCell align=\"right\">{d.statuslastupdated.substring(0, 19)}</TableCell>\n                <TableCell align=\"right\">{toOddsStr(d.hadodds)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Container from '@material-ui/core/Container';\n\nimport * as MQTT from 'paho-mqtt';\nimport LoginCtrl from './LoginCtrl'\nimport MatchSubscription from './MatchSubscription'\nimport MatchTable from './MatchTable'\nimport DeltaTable from './DeltaTable'\n\n// Global variables\nvar mqttClient;\nvar testCase = \"FULL\"\nvar replyToTopic = \"\";\nconst cacheRequestTopic = \"cacheproxy/request\";\nconst utf8decoder = new TextDecoder();\nconst topicsMap = new Map([[\"FULL\", \"t1/match/+/full\"],\n[\"DELTA\", \"t1/match/+/delta\"],\n[\"SEQUENCE\", \"t1/match/1/delta\"]])\nvar _gCurrentMatchList = []\nvar _gCurrentDeltaList = []\nvar _lastSeq = 0\n\nexport default function App() {\n  const [status, setStatus] = useState({\n    isConnect: false,\n    text: \"No Connection\"\n  });\n  const [isStart, setIsStart] = useState(false);\n  const [matchList, setMatchList] = useState([]);\n  const [deltaList, setDeltaList] = useState([]);\n  var host = \"localhost\"\n  var port = 9001\n  var userName = \"web\"\n  var password = \"password\"\n\n  function connect(host, port, userName, password) {\n    console.log(\"connect() is called\")\n    if ('string' == typeof port) {\n      port = parseInt(port)\n    }\n    mqttClient = new MQTT.Client(host, port, \"\");\n    mqttClient.onConnectionLost = onConnectionLost;\n    mqttClient.onMessageArrived = onMessageArrived;\n    mqttClient.onConnected = onConnected;\n    var options = {\n      timeout: 3,\n      onFailure: onFailure,\n      userName: userName,\n      password: password,\n    };\n    mqttClient.connect(options);\n  }\n\n  function disConnect() {\n    console.log(\"disConnect() is called\")\n    if (status.isConnect) {\n      mqttClient.disconnect()\n    }\n  }\n\n  function onFailure(response) {\n    setStatus({\n      isConnect: false,\n      text: \"Connection Failure: \" + response.errorMessage\n    });\n  }\n\n  function onConnectionLost(response) {\n    setStatus({\n      isConnect: false,\n      text: \"Connection Lost: \" + response.errorMessage\n    });\n    setIsStart(false)\n  }\n\n  function onConnected(reconnect, URI) {\n    // Subscribe client to the special Solace topic for requesting a unique\n    // Reply-to destination for the MQTT client\n    mqttClient.subscribe(\"$SYS/client/reply-to\");\n    setStatus({\n      isConnect: true,\n      text: \"Connected to \" + URI\n    });\n    setIsStart(false)\n    _gCurrentMatchList = []\n    _gCurrentDeltaList = []\n    setMatchList(_gCurrentMatchList)\n    setDeltaList(_gCurrentDeltaList)\n  }\n\n  // called when a message arrives\n  function onMessageArrived(message) {\n    // if its '$SYS/client/reply-to', request for cache\n    if (message.destinationName === '$SYS/client/reply-to') {\n      replyToTopic = message.payloadString;\n      mqttClient.subscribe(replyToTopic)\n      return\n    }\n    var json = JSON.parse(utf8decoder.decode(message.payloadBytes));\n    if (json.isDelta) {\n      if (testCase === \"DELTA\") {\n        onDeltaMessage(json)\n      } else {\n        onSequenceaMessage(json)\n      }\n    } else {\n      onFullMatchMessage(json)\n    }\n  }\n\n  function onFullMatchMessage(match) {\n    var index = _gCurrentMatchList.findIndex((m) => m.matchNum === match.matchNum)\n    if (index >= 0) {\n      _gCurrentMatchList.splice(index, 1)\n    }\n    _gCurrentMatchList.push(match)\n    setMatchList([..._gCurrentMatchList])\n  }\n\n  function onDeltaMessage(delta) {\n    //console.log(`onDeltaMessage(${delta.matchNum}), matchList.length=${matchList.length}`)\n    \n    var index = _gCurrentMatchList.findIndex((m) => m.matchNum === delta.matchNum)\n    if (index >= 0) {\n      var match = _gCurrentMatchList[index];\n      match.matchNum = delta.matchNum\n      match.matchStatus = delta.matchStatus\n      match.statuslastupdated = delta.statuslastupdated\n      match.hadodds.H = delta.hadodds.H\n      match.hadodds.A = delta.hadodds.A\n      match.hadodds.D = delta.hadodds.D\n\n      setMatchList([..._gCurrentMatchList])\n    } else {\n      // no related full match info, ask for cache of this match\n      // console.log(`index:${index} -> requestSingleCachedMatchs(${delta.matchNum})`)\n      var requestTopic = \"t1/match/\" + delta.matchNum + \"/full\"\n      publishCacheRequest(requestTopic);\n    }\n  }\n\n  function onSequenceaMessage(delta) {\n    var index = _gCurrentDeltaList.findIndex((d)=> d.sequenceInt === delta.sequenceInt)\n    if (index >= 0){\n      return\n    }\n    \n    _gCurrentDeltaList.push(delta);\n    if (_gCurrentDeltaList.length > 20){\n      _gCurrentDeltaList.shift()\n    }\n\n    if(!delta.isReSend){\n      var curSeq = delta.sequenceInt;\n      if (curSeq - _lastSeq !== 1){\n        console.log(`Msg Lost! Last Seq=${_lastSeq} Current Seq=${curSeq}`)\n        // ask for lost messages from cache\n        publishCacheRequest(topicsMap.get(testCase), true)\n      }\n      _lastSeq = curSeq;\n    }\n    setDeltaList([..._gCurrentDeltaList])\n  }\n\n  function start(testCaseToDo) {\n    testCase = testCaseToDo\n    console.log(\"start: \" + testCase)\n\n    if (testCase === \"FULL\" || testCase === \"DELTA\"){\n      // At first, ask for cached full matchs\n      publishCacheRequest(topicsMap.get(\"FULL\"))\n    }\n    mqttClient.subscribe(topicsMap.get(testCase))\n    setIsStart(true)\n  }\n\n  function publishCacheRequest(requestTopic, isReSend=false) {\n    var req = {\n      protocol: \"mqtt\",\n      topic: requestTopic,\n      replyTo: replyToTopic,\n      isReSend: isReSend\n    }\n    mqttClient.publish(cacheRequestTopic, JSON.stringify(req))\n  }\n\n\n  function stop() {\n    mqttClient.unsubscribe(topicsMap.get(testCase))\n    setIsStart(false)\n    // clean the Match and Delta list\n    _gCurrentMatchList = [];\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <LoginCtrl host={host} port={port} userName={userName} password={password}\n        status={status} connect={connect} disConnect={disConnect} />\n      <MatchSubscription testCase={testCase} topicsMap={topicsMap}\n        isStart={isStart} status={status} start={start} stop={stop} />\n      {testCase===\"SEQUENCE\"\n      ?<DeltaTable deltaList={deltaList}/>\n      :<MatchTable matchList={matchList} />\n      }\n    </Container>\n  );\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}